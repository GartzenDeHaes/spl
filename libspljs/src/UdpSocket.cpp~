/*
 *   This file is part of the Standard Portable Library (SPL).
 *
 *   SPL is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   SPL is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with SPL.  If not, see <http://www.gnu.org/licenses/>.
 */
 #include <spl/Environment.h>
 #include <spl/net/UdpSocket.h>

UdpSocket::UdpSocket( int port )
: m_sock(new Socket(0, AF_INET, SOCK_DGRAM, IPPROTO_UDP)), m_address(), m_port(port)
{
	memset(&m_recvFromAddr, 0, sizeof(m_recvFromAddr));

	SOCKADDR_IN local;
	local.sin_family = AF_INET;
	local.sin_addr.s_addr = port;
	local.sin_port = 0; // choose any
	
	if (0 != ::bind(m_sock->GetFD(), (sockaddr *)&local, sizeof(local)))
	{
		m_sock->m_errorStatus = Environment::LastError();
		throw new SocketException(Environment::LastErrorMessage());
	}
}

UdpSocket::UdpSocket( const String& address, int port )
: m_sock(new Socket(0, AF_INET, SOCK_DGRAM, IPPROTO_UDP)), m_address(address), m_port(port)
{
	memset(&m_recvFromAddr, 0, sizeof(m_recvFromAddr));
	
	m_sock->m_saAddr.sin_port = m_port;
	
	if (isdigit(m_address.CharAt(0)))
	{
		m_sock->m_saAddr.sin_addr.s_addr = inet_addr(m_address.GetChars());
	}
	else
	{
		hostent *phostent = gethostbyname(m_address.GetChars());
		memcpy ((char *)&(m_sock->m_saAddr.sin_addr), phostent->h_addr, phostent->h_length);
	}
	
	SOCKADDR_IN local;
	local.sin_family = AF_INET;
	local.sin_addr.s_addr = 0;
	local.sin_port = 0; // choose any
	
	if (0 != ::bind(m_sock->GetFD(), (sockaddr *)&local, sizeof(local)))
	{
		m_sock->m_errorStatus = Environment::LastError();
		throw new SocketException(Environment::LastErrorMessage());
	}
}

UdpSocket::~UdpSocket()
{
	m_sock->Close();
}

void UdpSocket::Send (const Array<byte>& packet)
{
	if(packet.Length() != sendto(m_sock->GetFD(), (const char *)(byte *)packet, packet.Length(), 0, (sockaddr *)m_sock->GetAddr(), sizeof(SOCKADDR_IN)))
	{
		m_sock->m_errorStatus = Environment::LastError();
		throw new SocketException(Environment::LastErrorMessage());	
	}
}

void UdpSocket::Send(const Array<byte>& packet, const String& address)
{
	SOCKADDR_IN addr;
	addr.sin_family = AF_INET;
	addr.sin_port = htons( m_port );
	
	if (isdigit(address.CharAt(0)))
	{
		addr.sin_addr.s_addr = inet_addr(address.GetChars());
	}
	else
	{
		hostent *phostent = gethostbyname(address.GetChars());
		memcpy ((char *)&(addr.sin_addr), phostent->h_addr, phostent->h_length);
	}
	if (packet.Length() != sendto(m_sock->GetFD(), (const char *)(byte *)packet, packet.Length(), 0, (sockaddr *)&addr, sizeof(addr)))
	{
		m_sock->m_errorStatus = Environment::LastError();
		throw new SocketException(Environment::LastErrorMessage());	
	}
}

int UdpSocket::Recv(Array<byte>& packet)
{
	int addrSize = sizeof(m_recvFromAddr);
	return recvfrom(m_sock->GetFD(), (char *)(byte *)packet, packet.Length(), 0, (sockaddr *)&m_recvFromAddr, &addrSize);
}

#if defined(DEBUG) || defined(_DEBUG)
void UdpSocket::CheckMem() const 
{
	m_address.CheckMem(); 
	m_sock.CheckMem();
}

void UdpSocket::ValidateMem() const 
{
	m_address.ValidateMem(); 
	m_sock.ValidateMem();
}
#endif
